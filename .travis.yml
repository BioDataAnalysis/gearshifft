
dist: trusty
os: linux
sudo: required
language: cpp

sudo: false
    
branches:
    only:
        - master
        - travis

env:
    global:
        - BOOST_VERSION=1.60.0
        - CUDA_VERSION=8.0.61-1
        - CUDA_VERSION_SHORT=8.0
        #- GEARSHIFFT_CLFFT_VERSION=v2.12.2
        - CLANG_VERSION=3.8
        - FFTW_CACHE_PATH=${TRAVIS_BUILD_DIR}/deps/fftw
        
cache:
    directories:
        - ${TRAVIS_BUILD_DIR}/deps/cuda-${CUDA_VERSION_SHORT}
        #- ${TRAVIS_BUILD_DIR}/deps/clfft-${GEARSHIFFT_CLFFT_VERSION}
        - ${TRAVIS_BUILD_DIR}/deps/boost-${BOOST_VERSION}
        - ${TRAVIS_BUILD_DIR}/sources/
        - ${FFTW_CACHE_PATH}

addons:
    apt:
        sources:
            - ubuntu-toolchain-r-test
        packages:
            - clang-3.8
            - cmake
            - libfftw3-dev
            - opencl-headers
            
matrix:
    include:
        - name: Clang-3.8 CUDA-8.0.61 Boost-1.60.0 FFTW3 Release
          compiler: clang
          env: GEARSHIFFT_BUILD_TYPE=Release
        - name: g++-5 CUDA-8.0.61 Boost-1.60.0 FFTW3 Release
          compiler: gcc
          env: GEARSHIFFT_BUILD_TYPE=Release
        - name: g++-5 CUDA-8.0.61 Boost-1.60.0 FFTW3 Debug
          compiler: gcc
          env: GEARSHIFFT_BUILD_TYPE=Debug
  
before_install:
    - set -e
    - travis_retry sudo apt-get install -qq g++-5
    - sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-5 90
    - |
      CUDA_CACHE_PATH=${TRAVIS_BUILD_DIR}/deps/cuda-${CUDA_VERSION_SHORT}
      if [[ -z "$(ls -A ${CUDA_CACHE_PATH})" ]]; then
        travis_retry wget https://developer.nvidia.com/compute/cuda/8.0/Prod2/local_installers/cuda-repo-ubuntu1404-8-0-local-ga2_${CUDA_VERSION}_amd64-deb -q -O "${CUDA_CACHE_PATH}/cuda.deb";
      else
        echo "Using cached cuda.deb in $CUDA_CACHE_PATH"
      fi
      travis_retry sudo dpkg -i ${CUDA_CACHE_PATH}/cuda.deb
      travis_retry sudo apt-get update -qq
      CUDA_APT=${CUDA_VERSION_SHORT/./-}
      travis_retry sudo apt-get install -qy cuda-core-${CUDA_APT} cuda-cudart-dev-${CUDA_APT} cuda-cufft-${CUDA_APT} cuda-cufft-dev-${CUDA_APT}

install:
    - if [ "${CXX}" == "g++" ]; then export CXX=g++-5; export CC=${CXX/g++/gcc}; export GCOV=${CXX/g++/gcov}; fi
    - if [ "${CXX}" == "clang++" ]; then export CXX=clang++-${CLANG_VERSION}; export CC=clang-${CLANG_VERSION}; export GCOV="gcov"; fi
    # Boost
    - |
        export BOOST_ROOT="${TRAVIS_BUILD_DIR}/deps/boost-${BOOST_VERSION}"
        export CMAKE_PREFIX_PATH=${BOOST_ROOT}:${CMAKE_PREFIX_PATH}
        if [[ -z "$(ls -A ${BOOST_ROOT})" ]]; then
            BOOST_SRC=${TRAVIS_BUILD_DIR}/sources/boost
            mkdir -p ${BOOST_SRC}
            travis_retry wget http://sourceforge.net/projects/boost/files/boost/${BOOST_VERSION}/boost_${BOOST_VERSION//\./_}.tar.bz2 -nc -O ${BOOST_SRC}/../boost.tar.bz2
            (cd ${BOOST_SRC}/../; tar jxf boost.tar.bz2 --strip-components=1 -C ${BOOST_SRC})
            (cd ${BOOST_SRC}; ./bootstrap.sh --with-libraries=program_options,filesystem,system,test)
            (cd ${BOOST_SRC}; ./b2 --prefix=$BOOST_ROOT -d0 install)
        else
            echo "Using cached boost version at $BOOST_ROOT"
        fi

    # CUDA
    - |
      export CUDA_ROOT=/usr/local/cuda-${CUDA_VERSION_SHORT}
      export LD_LIBRARY_PATH=${CUDA_ROOT}/lib64:${LD_LIBRARY_PATH}
      export PATH=${CUDA_ROOT}/bin:${PATH}

    # Versions
    - $CXX --version
    - nvcc --version
    - cmake --version

script:
    - mkdir build && cd build
    - set -e
    - cmake -DCMAKE_BUILD_TYPE=${GEARSHIFFT_BUILD_TYPE} -DGEARSHIFFT_VERBOSE=ON -DGEARSHIFFT_TESTS_ADD_CPU_ONLY=ON ..
    - make -j 2
    - ctest --output-on-failure
    - set +e

notifications:
    email: false
